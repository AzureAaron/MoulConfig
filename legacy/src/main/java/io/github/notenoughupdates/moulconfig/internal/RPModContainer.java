package io.github.notenoughupdates.moulconfig.internal;

import com.google.common.eventbus.EventBus;
import io.github.notenoughupdates.moulconfig.tweaker.DevelopmentResourceTweaker;
import lombok.var;
import net.minecraftforge.fml.client.FMLFileResourcePack;
import net.minecraftforge.fml.common.DummyModContainer;
import net.minecraftforge.fml.common.LoadController;
import net.minecraftforge.fml.common.ModContainer;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.discovery.ASMDataTable;
import net.minecraftforge.fml.common.discovery.ContainerType;
import net.minecraftforge.fml.common.discovery.ModCandidate;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;

public class RPModContainer extends ModCandidate {
    public static File file;

    @SuppressWarnings("unused") // Used by ModDiscovererTransformer
    public static void injectModContainer(List<ModCandidate> candidates) {
        candidates.add(new RPModContainer());
    }

    static {
        URL location = DevelopmentResourceTweaker.class.getProtectionDomain().getCodeSource().getLocation();
        if (location == null) {
            throw new RuntimeException("Used " + DevelopmentResourceTweaker.class.getName() + " without a location");
        }
        if ("jar".equals(location.getProtocol())) {
            try {
                location = new URL(location.toString().substring(4).split("!")[0]);
            } catch (MalformedURLException e) {
                throw new RuntimeException(e);
            }
        }
        if (!"file".equals(location.getProtocol()))
            throw new RuntimeException("Used " + DevelopmentResourceTweaker.class.getName() + " inside the MoulConfig development environment");
        try {
            file = new File(location.toURI());
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    public RPModContainer() {
        super(file, file, ContainerType.JAR);
    }

    public List<ModContainer> explore(ASMDataTable table) {
        var md = new ModMetadata();
        md.modId = "moulconfigrp";
        md.name = "MoulConfig Resource Pack";
        md.autogenerated = true;
        return Arrays.asList(new DummyModContainer(md) {
            @Override
            public Object getMod() {
                return new Object();
            }

            @Override
            public boolean registerBus(EventBus bus, LoadController controller) {
                return true;
            }

            @Override
            public Class<?> getCustomResourcePackClass() {
                return FMLFileResourcePack.class;
            }

            @Override
            public File getSource() {
                return file;
            }
        });
    }
}
